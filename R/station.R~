# Author R.E. Benestad

# Can return one station or a group of stations. A cluster of regional stations can be
# reppresented in terms of PCA, maintaining the spatial consistencies between them.
# It is also possible to use a set of station objects to provide multi-information from
# one location: e.g. T(2m), precip; mean, variance, skewness, & kurtosis...

# Update A. Mezghani
# Date   29.07.2013
require(zoo)

station <- function(stid=NULL,...) UseMethod("station")

## default
station.default <- function(stid=NULL,loc=NULL,param="t2m",lon=NULL,lat=NULL, # AM-29.07.2013 "loc" added into the arguments 
                            alt=NULL,cntr=NULL,
                    src = c("NARP","NACD","ECSN","NORKLIMA","GHCND"), # AM-29.07.2013 update I would use ECAD instead of ECSN
                    plot=FALSE,col="alt",silent=TRUE) {

  #load("esd/data/station.meta.rda")
  #data("station.meta",envir=environment())
  #src <- "ECSN" # For now...
  OBS <- NULL
  
  # Find the ID(s) for one or a group of stations: stid
  if (param=="t2m") ele <- 101
  if (param=="precip") ele <- 601
  ss <- select.station(stid,loc=loc,lon=lon,lat=lat,alt=alt,cntr=cntr,ele=ele,src=src) # AM-29.07.2013 "loc" added into the arguments 
  id <- ss$station_id
  if (!silent) {print("station ID:"); str(ss$station_id[id]) }
  stid <- ss$station_id
  src <- as.character(ss$source)
  for (i in 1:length(id)) {
    if (!silent) {print("id[i]"); print(paste(i,stid[i],src[i]))}
    if (src[i]=="ECAD") { #AM-29.07.2013 added "|(src[i]=="ECAD")"
      obs <- station.eca(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)
    } else if (src[i]=="NACD") {
      obs <- station.nacd(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)  
    } else if (src[i]=="NARP") {
      obs <- station.narp(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)  
    }  else if (src[i]=="NORDKLIM") {
      obs <- station.nordklim(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)  
    #AM-29.07.2013 added begin
    }  else if (src[i]=="GHCNM") {
      obs <- station.ghcnm(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)      
    }  else if (src[i]=="GHCND") {
      obs <- station.ghcnd(stid[i],param=param,silent=silent)
      if (!silent) {print("obs"); str(obs)}
      OBS <- combine.station(OBS,obs)  
    }
    #AM-29.07.2013 added end
  }
  colnames(OBS) <- attr(OBS,"location") #AM-30.07.2013 added line to update colnames in the zoo object
  # Plot the locations:
  if ( (plot) | is.null(stid)) map.station(stid,loc=loc,lon=lon,lat=lat,alt=alt,cntr=cntr, # AM-29.07.2013 "loc" added into the arguments 
                                           param=param,zexpr=zexpr)

  if (is.null(stid)) {
    obs <- NULL
    print(match.call())
  }
  
  invisible(OBS)
}


station.eca <- function(stid=NULL,param="t2m",path="eca",silent=TRUE) {# AM-29.07.2013 "path" updated old vlaue "data.eca"  
  # http://eca.knmi.nl/
  # ECA&D was initiated by the ECSN in 1998 
  # Retrieve data from the ECSN (ECA&D) data:
#  data("station.meta",envir=environment())

   if (tolower(param)=="t2m") param <- "TG"
   if (tolower(param)=="precip") param <- "RR"
   
   print("station.eca")
   # data("station.meta",envir=environment()) # AM-29.07.2013 line commented - already exist in select.station()
   #load("esd/data/station.meta.rda")
   
   # isrc <- is.element(station.meta$src,"ECAD") # AM-29.07.2013 "&" removed from "EAC&D"
   # imatch <- rep(FALSE,length(station.meta$location)) & isrc 
   # if (is.character(stid)) {
   #  nc <- nchar(stid)
   #  imatch <- is.element(tolower(substr(station.meta$location,1,nc)),
   #                       tolower(stid)) & isrc
   #} else if (is.numeric(stid)) {
   #  imatch <- is.element(station.meta$stid,stid) & isrc 
   #}
   # print(stid);  print(table(imatch))
   
   # Select stations in ss
   ss <- select.station(stid=stid,param=param,src="ECAD") # AM-29.07.2013 added and replaced the previous 
   # if (sum(imatch)==0) return(NULL) replaced by the following
   if (dim(ss)[1] ==0) return(NULL)
   lon <- ss$longitude   # AM-29.07.2013 old line "lon <- station.meta$longitude[imatch]" 
   lat <- ss$latitude    # AM-29.07.2013 old line "lat <- station.meta$latitude[imatch]
   alt <- ss$altitude    # AM-29.07.2013 old line "alt <- station.meta$altitude[imatch]
   cntr <- ss$country    # AM-29.07.2013 old line "cntr <- station.meta$country[imatch]
   stid <- ss$station_id # AM-29.07.2013 old line "stid <- as.character(station.meta$station_id[imatch]) # AM-29.07.2013 updated replaced "STID" by "stid"
   loc <- ss$location    # AM-29.07.2013 old line "location <- station.meta$location[imatch]
   quality <- ss$quality # AM-29.07.2013 old line "quality <- station.meta$quality[imatch]

   for (i in 1:length(stid)) 
     while(nchar(stid[i]) < 6) stid[i] <- paste('0',stid[i],sep="")
   
   fnames <- paste(path,'/',toupper(param),'_STAID',stid,'.txt',sep="")
   #print(fnames)
   ipick <- file.exists(fnames)
   if (sum(ipick)==0)  return(NULL)
   if (sum(ipick)!=1) {
     warning('More than one matches - I choose the first!')
     ipick <- (1:length(ipick))[ipick][1]
   }
   fname <- fnames[ipick]
   lon <- lon[ipick]; lat <- lat[ipick]
   alt <- alt[ipick]; stid <- stid[ipick]
   cntrn <- cntr[ipick]; location <- location[ipick]
   if (!silent) print(fname)
   
   # Option to read more than one file: run station.eca multiple times...

   ECSNin <- read.table(fname,header=TRUE,skip=20,sep=",")
   scale <- switch(param,'TG'=0.1,'TX'=0.1,'TN'=0.1,'CC'=1,'DD'=1,'FG'=0.1,
                         'FX'=0.1,'HU'=1,'PP'=0.1,'SS'=0.1,'RR'=0.1)
   eval(parse(text=paste('ecsn <- scale * ECSNin$',param,sep="")))
   year <- trunc(ECSNin$DATE/10000);L <- length(year)
   month <- trunc(ECSNin$DATE/100) - year*100
   day <- ECSNin$DATE - year *10000 - month*100

   ecsn[ecsn < -99] <- NA

   if (!silent) {
     print(c(year[1],month[1],day[1]))
     print(c(year[L],month[L],day[L]))
     print(summary(ecsn))
     print(length(ecsn))
     print(stid)
   }

   ECSN <- zoo(ecsn,
               order.by = as.Date(paste(year, month, day, sep = "-"),
                 by='day', length.out = L))
              
   #print("attributes")
   # Add meta data as attributes:
   attr(ECSN,'station_id') <- stid
   attr(ECSN,'quality') <- quality
   attr(ECSN,'longitude') <- lon
   attr(ECSN,'latitude') <- lat
   attr(ECSN,'altitude') <- alt
   attr(ECSN,'frequency') <- 1
#   attr(ECSN,'timeunit') <- 'day'
   attr(ECSN,'calendar') <- 'gregorian'
   attr(ECSN,'country') <- cntr
   attr(ECSN,'location') <- location
 
   attr(ECSN,'src') <- 'ECSN'
   attr(ECSN,'URL') <- "http://eca.knmi.nl/utils/downloadfile.php?file=download/ECA_blend_all.zip"
   attr(ECSN,'history') <- 'ECSN [esd]'
   attr(ECSN,'date-stamp') <- date()
   attr(ECSN,'parameter') <- switch(param,'TG'=expression(T[2*m]),'TX'=expression(paste("max ",T[2*m])),
                                    'TN'=expression(paste("min ",T[2*m])),
                                    'CC'='cloud cover','DD'='wind direction','FG'='wind speed',
                                    'FX'='wind gust','HU'='humidity','PP'='SLP',
                                    'SS'='Sunshine','RR'='precipitation')
   attr(ECSN,'aspect') <- 'original'
   attr(ECSN,'unit') <- switch(param,'TG'='deg C','TX'='deg C','TN'='deg C',
                               'CC'='oktas','DD'='degrees','FG'='m/s',
                               'FX'='m/s','HU'='%','PP'='hPa',
                               'SS'='hours','RR'='mm/day')
   attr(ECSN,'longname') <- switch(param,'TG'='daily mean Temperature',
                                   'TX'='daily maximum temperature',
                                   'TN'='daily minimum temperature',
                               'CC'='cloud cover','DD'='Wind direction','FG'='Wind speed',
                               'FX'='Wind gust','HU'='Humidity','PP'='Sea level pressure',
                               'SS'='Sunshine','RR'='precipitation amount')

   attr(ECSN,'reference') <- "Klein Tank, A.M.G. and Coauthors, 2002. Daily dataset of 20th-century surface air temperature and precipitation series for the European Climate Assessment. Int. J. of Climatol., 22, 1441-1453."
   attr(ECSN,'info') <- "Data and metadata available at http://eca.knmi.nl"
   attr(ECSN,'call') <- match.call()
   class(ECSN) <- c("station","day","zoo")
   invisible(ECSN)
}


# This R routine reads the NACD data. The code
# will not work with the original NACD files: a space
# must be inserted between the December value and the
# country tag, and the missing values must be changed
# from '-9999' to ' -999'.
#
# Arguments:
# 'location' determines the time series.
# 'ele.c' determines the element (default=T2m).
#
# R.E. Benestad

replace.char <- function (c, s, ny.c)  {
    if (c == ny.c) return(s)
    nc <- nchar(c); ns <- nchar(s)
    is <- 1
    tries <- instring(c, s)
    if (length(tries)==0) return(s)
    #print(nc)
    while ( (instring(c, s)[1] > 0) & (is <= length(tries)) ) {        
        ii <- instring(c, s)[1]
        #print(ii); print(c);print(s)
        if (ii > 1) {
            s <- paste(substr(s, 1, ii - 1), ny.c,
                       substr(s, ii + nc, nchar(s)), sep = "")
        } else if (ii==1) s <- paste(ny.c,
                     substr(s, ii + nc + 1, nchar(s)), sep = "")
        is <- is + 1
    }
    s
}



station.nacd <- function(stid=NULL,param="t2m",silent=TRUE) {

  print("station.nacd")
  #data("station.meta",envir=environment())
  #load("esd/data/station.meta.rda")

  ele.c<-switch(tolower(param),
                't2m'='101','tg'='101','rr'='601','slp'='401','cloud'='801',
                't2'='101','precip'='601','101'='101','401'='401',
                '601'='601','801'='801')

  #isrc <- is.element(station.meta$src,"NACD")
  #iparam <- is.element(station.meta$element,ele.c)
  #imatch <- rep(FALSE,length(station.meta$location)) & isrc & iparam
  #if (is.character(stid)) {
  #   nc <- nchar(stid)
  #   imatch <- is.element(tolower(substr(station.meta$location,1,nc)),
  #                        tolower(stid)) & isrc & iparam
  # } else if (is.numeric(stid)) {
  #   imatch <- is.element(station.meta$stid,stid) & isrc & iparam
  # }
   # Select stations in ss
   ss <- select.station(stid=stid,ele=ele.c,src="NACD") # AM-29.07.2013 added and replaced the previous 
   # if (sum(imatch)==0) return(NULL) replaced by the following
   if (dim(ss)[1] ==0) return(NULL)
   lon <- ss$longitude   
   lat <- ss$latitude    
   alt <- ss$altitude    
   cntr <- ss$country    
   stid <- ss$station_id
   loc <- ss$location
   quality <- ss$quality
   #browser()
   load("esd/data/NACD.rda")
   #data("NACD")
   loc <- gsub("-",".",loc) # AM replace.char() replaced by gsub()
   loc <- gsub("/",".",loc) # AM replace.char() replaced by gsub()
   if (substr(loc,nchar(loc),nchar(loc)) ==".") loc <- substr(loc,1,nchar(loc)-1) # AM 29.07.2013 added 
   elem<-switch(ele.c,'101'='t2m','601'='precip','401'='slp','801'='cloud')
  string <- paste("x <- NACD$",loc,".",elem,sep="")
  #print(string)
  eval(parse(text=string))

# Element 101, Mean monthly air-temperature.
# Element 111, Mean maximum monthly air-temperature.
# Element 112, Absolute maximum monthly air-temperature.
# Element 121, Mean minimum monthly air-temperature.
# Element 122, Aboslute minimum air-temperature.
# Element 401, Mean monthly sea level pressure.
# Element 601, Mean monthly precipitation sum.
# Element 602, Highest monthly 1-day precipitation.
# Element 701, Mean monthly days with snow cover > 50 %
# Element 801, Mean monthly cloud cover.

  obs.name<-switch(ele.c,
                     '101'='monthly mean T(2m)',
                     '111'='mean maximum monthly air-temperature.',
                     '112'='absolute maximum monthly air-temperature',
                     '122'='aboslute minimum air-temperature',
                     '401'='monthly mean SLP',
                     '601'='monthly precipitation sum',
                     '602'='highest monthly 1-day precipitation',
                     '701'='mean monthly days with snow cover > 50 %',
                     '801'='monthly mean cloud cover')
  unit<-switch(ele.c,
                     '101'='degree Celsius',
                     '111'='degree Celsius',
                     '112'='degree Celsius',
                     '122'='degree Celsius','401'='hPa',
                     '601'='mm/month','701'='days','801'='%')
#print(as.character(meta$V16))
#  quality<-switch(as.character(quality),
#                ' H'='Homogenous, rigorously tested & adjusted',
#                'h'='Homogenous, rigorously tested & adjusted',
#                ' T'='Tested, maybe adjusted but not perfectly H.',
#                't'='Tested, maybe adjusted but not perfectly H.',
#                ' N'='Not tested for inhomogenouity',
#                'n'='Not tested for inhomogenouity',
#                ' E'='Environm. changes prevents clim.change studies',
#                'e'='Environm. changes prevents clim.change studies',
#                ' I'='Inhomogenous series which presently are unadjustable',
#                'i'='Inhomogenous series which presently are unadjustable')

  ny <- length(attr(x,'year'))
  year <- sort(rep(attr(x,'year'),12)); L <- length(year)
  month <- rep(1:12,length(ny))
  day <- rep(1,length(month))
  x[x < -99] <- NA

  NACD <- zoo(c(t(x)),
               order.by = as.Date(paste(year, month, day, sep = "-"),
                 by='month', length.out = L))
   names(NACD) <- loc # AM 30.07.2013 added           
   #print("attributes")
   # Add meta data as attributes:
   attr(NACD,'station_id') <- stid
   attr(NACD,'location') <- loc
   attr(NACD,'country') <- cntr
   attr(NACD,'longitude') <- lon
   attr(NACD,'latitude') <- lat
   attr(NACD,'altitude') <- alt
   attr(NACD,'frequency') <- 1
#   attr(NACD,'timeunit') <- 'month'
   attr(NACD,'calendar') <- 'gregorian'
   attr(NACD,'quality') <- quality
   attr(NACD,'src') <- 'NACD'
   attr(NACD,'URL') <- ""
   attr(NACD,'history') <- 'NACD [esd]'
   attr(NACD,'date-stamp') <- date()
   attr(NACD,'parameter') <- switch(param,'t2m'=expression(T[2*m]),'TX'=expression(paste("max ",T[2*m])),
                                    'TN'=expression(paste("min ",T[2*m])),
                                    'CC'='cloud cover','DD'='wind direction','FG'='wind speed',
                                    'FX'='wind gust','HU'='humidity','PP'='SLP',
                                    'SS'='Sunshine','RR'='precipitation')
   attr(NACD,'aspect') <- 'original'
   attr(NACD,'unit') <- unit
   attr(NACD,'longname') <- switch(elem,'t2m'='daily mean Temperature',
                                   'TX'='daily maximum temperature',
                                   'TN'='daily minimum temperature',
                               'CC'='cloud cover','DD'='Wind direction','FG'='Wind speed',
                               'FX'='Wind gust','HU'='Humidity','PP'='Sea level pressure',
                               'SS'='Sunshine','RR'='precipitation amount')

   attr(NACD,'reference') <- "Frich et al. (1996), DMI scientific report 96-1"
   attr(NACD,'info') <- "Data and metadata adopted from clim.pact"
   attr(NACD,'call') <- match.call()
   class(NACD) <- c("station","month","zoo")
   invisible(NACD)
}




station.narp <- function(stid=NULL,param="t2m",silent=TRUE) {

  print("station.narp")
  data("station.meta",envir=environment())
  #load("esd/data/station.meta.rda")

  ele.c<-switch(tolower(param),
                't2m'='101','tg'='101','rr'='601','slp'='401','cloud'='801',
                't2'='101','precip'='601','101'='101','401'='401',
                '601'='601','801'='801')

  isrc <- is.element(station.meta$src,"NARP")
  imatch <- rep(FALSE,length(station.meta$location)) & isrc 
  if (is.character(stid)) {
     nc <- nchar(stid)
     imatch <- is.element(tolower(substr(station.meta$location,1,nc)),
                          tolower(stid)) & isrc 
   } else if (is.numeric(stid)) {
     imatch <- is.element(station.meta$stid,stid) & isrc
   }
   #print(stid);  print(table(imatch))
   if (sum(imatch)==0) return(NULL)
   lon <- station.meta$lon[imatch]
   lat <- station.meta$lat[imatch]
   alt <- station.meta$alt[imatch]
   cntr <- station.meta$CN[imatch]
   STAID <- station.meta$stid[imatch]
   location <- station.meta$location[imatch]
   quality <- station.meta$quality[imatch]

# Element 101, Mean monthly air-temperature.
# Element 111, Mean maximum monthly air-temperature.
# Element 112, Absolute maximum monthly air-temperature.
# Element 121, Mean minimum monthly air-temperature.
# Element 122, Aboslute minimum air-temperature.
# Element 401, Mean monthly sea level pressure.
# Element 601, Mean monthly precipitation sum.
# Element 602, Highest monthly 1-day precipitation.
# Element 701, Mean monthly days with snow cover > 50 %
# Element 801, Mean monthly cloud cover.

    v.name<-switch(ele.c,
         '101'='monthly mean T(2m)','111'='mean maximum monthly air-temperature.',
          '112'='absolute maximum monthly air-temperature',
          '122'='aboslute minimum air-temperature',
          '401'='monthly mean SLP',
          '601'='monthly precipitation sum','602'='highest monthly 1-day precipitation',
          '701'='mean monthly days with snow cover > 50 %','801'='monthly mean cloud cover')
    unit<-switch(ele.c,
                     '101'='degree Celsius','111'='degree Celsius','112'='degree Celsius',
                     '122'='degree Celsius','401'='hPa',
                     '601'='mm','701'='days','801'='%')

    #data(NARP)
    load("esd/data/NARP.rda")
    iii <- is.element(NARP[,1],STAID) & is.element(NARP[,2],as.numeric(ele.c))
    obs <- NARP[iii,4:15]/10; L <- length(year)
    obs[obs <= -99] <- NA
    ny <- length(NARP[iii,3])
    year <- sort(rep(NARP[iii,3],12))
    month <- rep(1:12,ny)
    day <- rep(1,length(year))

    NARP <- zoo(c(t(obs)),
               order.by = as.Date(paste(year, month, day, sep = "-"),
                 by='month', length.out = L))
              
   #print("attributes")
   # Add meta data as attributes:
   attr(NARP,'station_id') <- STAID
   attr(NARP,'location') <- location
   attr(NARP,'longitude') <- lon
   attr(NARP,'latitude') <- lat
   attr(NARP,'altitude') <- alt
   attr(NARP,'frequency') <- 1
#   attr(NARP,'timeunit') <- 'month'
   attr(NARP,'calendar') <- 'gregorian'
   attr(NARP,'country') <- cntr
   attr(NARP,'quality') <- quality 
   attr(NARP,'src') <- 'NARP'
   attr(NARP,'URL') <- ""
   attr(NARP,'history') <- 'NARP [esd]'
   attr(NARP,'date-stamp') <- date()
   attr(NARP,'parameter') <- switch(param,'t2m'=expression(T[2*m]),
                                    'TX'=expression(paste("max ",T[2*m])),
                                    'TN'=expression(paste("min ",T[2*m])),
                                    'CC'='cloud cover','DD'='wind direction',
                                    'FG'='wind speed',
                                    'FX'='wind gust','HU'='humidity',
                                    'PP'='SLP',
                                    'SS'='Sunshine','RR'='precipitation')
   attr(NARP,'unit') <- unit
   attr(NARP,'longname') <- v.name
   attr(NARP,'aspect') <- 'original'
   attr(NARP,'reference') <- "Nordic Arctic Research Programme"
   attr(NARP,'info') <- "narp2esd.R"
   attr(NARP,'call') <- match.call()
   class(NARP) <- c("station","month","zoo")
   invisible(NARP)
}


station.nordklim <- function(stid=NULL,param="t2m",silent=TRUE) {
  if (param=="t2m") {
    data("t2m.nordklim",envir=environment())
    if (is.numeric(stid)) {
      ii <- is.element(attr(t2m.nordklim,'station_id'),stid)
      if (sum(ii)>0) y <- t2m.nordklim[,ii] else return(NULL)
    } else if (is.char(stid)) {
      ii <- grep(tolower(stid),tolower(attr(t2m.nordklim,'location')))
      if (length(ii)>0) y <- t2m.nordklim[,ii] else return(NULL)
    }
   attr(y,'station_id') <- attr(t2m.nordklim,'station_id')[ii]
   attr(y,'quality') <- NA
   attr(y,'longitude') <- attr(t2m.nordklim,'longitude')[ii]
   attr(y,'latitude') <- attr(t2m.nordklim,'latitude')[ii]
   attr(y,'altitude') <- attr(t2m.nordklim,'altitude')[ii]
   attr(y,'frequency') <- 1
   attr(y,'calendar') <- 'gregorian'
   attr(y,'country') <- attr(t2m.nordklim,'country')[ii]
   attr(y,'location') <- attr(t2m.nordklim,'location')[ii]
 
   attr(y,'src') <- 'NORKLIM'
   attr(y,'URL') <- ""
   attr(y,'history') <- 'station.nordklim'
   attr(y,'date-stamp') <- date()
   attr(y,'unit') <- 'deg C'
   attr(y,'longname') <- 'Temperature at 2m'
   } else if (param=="precip") {
    data("precip.nordklim",envir=environment())
        if (is.numeric(stid)) {
      ii <- is.element(attr(precip.nordklim,'station_id'),stid)
      if (sum(ii)>0) y <- precip.nordklim[,ii] else return(NULL)
    } else if (is.char(stid)) {
      ii <- grep(tolower(stid),tolower(attr(precip.nordklim,'location')))
      if (length(ii)>0) y <- precip.nordklim[,ii] else return(NULL)
    }
   attr(y,'station_id') <- attr(precip.nordklim,'station_id')[ii]
   attr(y,'quality') <- NA
   attr(y,'longitude') <- attr(precip.nordklim,'longitude')[ii]
   attr(y,'latitude') <- attr(precip.nordklim,'latitude')[ii]
   attr(y,'altitude') <- attr(precip.nordklim,'altitude')[ii]
   attr(y,'frequency') <- 1
   attr(y,'calendar') <- 'gregorian'
   attr(y,'country') <- attr(precip.nordklim,'country')[ii]
   attr(y,'location') <- attr(precip.nordklim,'location')[ii]
 
   attr(y,'src') <- 'NORKLIM'
   attr(y,'URL') <- ""
   attr(y,'history') <- 'station.nordklim'
   attr(y,'date-stamp') <- date()
   attr(y,'unit') <- 'mm/month'
   attr(y,'longname') <- 'Precipitation'
  }

  attr(y,'parameter') <- switch(param,'t2m'=expression(T[2*m]),
                                'TX'=expression(paste("max ",T[2*m])),
                                'TN'=expression(paste("min ",T[2*m])),
                                'CC'='cloud cover',
                                'DD'='wind direction','FG'='wind speed',
                                 'FX'='wind gust','HU'='humidity','PP'='SLP',
                                 'SS'='Sunshine','RR'='precipitation',
                                'precip'='precipitation')
  attr(y,'aspect') <- 'original'
  attr(y,'reference') <- "Nordklim"
  attr(y,'info') <- "nordklim2esd.R"
  attr(y,'call') <- match.call()
  class(y) <- c("station","month","zoo")
  invisible(y)
}


station.metno <- function(stid=18700,param="TAM",silent=TRUE,
                          fom = "01.01.1950", tom = "now", re = 14,
                          h = NULL, nmt = 0,  URL = NULL, dup = "A",
                          basepath = "http://klapp/metnopub/production/") {
  verbose <- !silent
  if (verbose) 
    print("https://dokit.met.no/klima/userservices/urlinterface/brukerdok")

  met.no.meta <- MET.no.meta()
  if (is.character(StNr)) {
        imatch <- is.element(lower.case(substr(met.no.meta$Navn, 
            1, nchar(StNr))), lower.case(StNr))
        if (sum(imatch) > 0) 
            StNr <- met.no.meta$Stnr[imatch]
        else {
            print(met.no.meta$Navn)
            return("Could not find requested station")
        }
  }
  alt <- as.numeric(met.no.meta$Hoh[met.no.meta$Stnr == StNr][1])
  lon <- met.no.meta$Lon[met.no.meta$Stnr == StNr][1]
  lat <- met.no.meta$Lat[met.no.meta$Stnr == StNr][1]
  location <- met.no.meta$NAME[met.no.meta$Stnr == StNr][1]
  t1 <- as.Date(fom)
  if (tom == "now") 
      tom <- format(Sys.time(),'%d.%m.%Y')

                
  if (is.null(URL)) {
        Filnavn <- paste(basepath, "metno?re=", re,
                         "&ct=text/plain&del=space&ddel=dot&nod=NA&split=1", 
            sep = "")
        if (!is.null(h)) 
            Filnavn <- paste(Filnavn, "&h=", h, sep = "")
        for (i in 1:length(param)) Filnavn <- paste(Filnavn, 
            "&p=", param[i], sep = "")
        if (!is.null(h)) 
            Filnavn <- paste(Filnavn, "&nmt=", nmt, sep = "")
        Filnavn <- paste(Filnavn, "&fd=", fom, "&td=", tom, sep = "")
        for (i in 1:length(StNr)) Filnavn <- paste(Filnavn, "&s=", 
            StNr[i], sep = "")
        if (!is.null(h)) 
            Filnavn <- paste(Filnavn, "&dup=", dup, sep = "")
  } else Filnavn <- URL
  if (verbose) 
        print(Filnavn)
  
  firstline <- readLines(Filnavn, n = 1, encoding = "latin1")
  if (substr(firstline, 1, 3) == "***") {
        valid.stations <- stnr(param = param)
        print(paste("No valid data was available for station no.", 
            stnr))
        print("station numbers with valid data are:")
        print(valid.stations)
        return("KDVH: I'm giving up with the present choice")
  }
  
  Datasett <- as.list(read.table(Filnavn, header = TRUE, as.is = TRUE, 
        fileEncoding = "latin1"))
  eval(parse(text = paste("y <- as.numeric(Datasett$", param, ")", 
        sep = "")))
  imatch <- is.element(met.no.meta$Stnr, StNr)


  type <- switch(re, `14` = "daily values", `17` = "observations")
  class(Datasett) <- c("KDVH", "met.no", type)
  invisible(Datasett)
  MET <- zoo(y,order.by = as.Date(paste(year, month, day, sep = "-")))
              
   #print("attributes")
   # Add meta data as attributes:
   attr(MET,'station_id') <- STAID
   attr(MET,'quality') <- quality
   attr(MET,'longitude') <- lon
   attr(MET,'latitude') <- lat
   attr(MET,'altitude') <- alt
   attr(MET,'frequency') <- 1
#   attr(MET,'timeunit') <- 'month'
   attr(MET,'calendar') <- 'gregorian'
   attr(MET,'country') <- cntr
   attr(MET,'location') <- location
 
   attr(MET,'src') <- 'MET Norway climate archive'
   attr(MET,'URL') <- "www.met.no"
   attr(MET,'history') <- 'MET [esd]'
   attr(MET,'date-stamp') <- date()
   attr(MET,'parameter') <- switch(param,'t2m'=expression(T[2*m]),
                                    'TX'=expression(paste("max ",T[2*m])),
                                    'TN'=expression(paste("min ",T[2*m])),
                                    'CC'='cloud cover','DD'='wind direction',
                                    'FG'='wind speed',
                                    'FX'='wind gust','HU'='humidity',
                                    'PP'='SLP',
                                    'SS'='Sunshine','RR'='precipitation')
   attr(MET,'unit') <- unit
   attr(MET,'longname') <- v.name
   attr(MET,'aspect') <- 'original'
   attr(MET,'reference') <- "Nordic Arctic Research Programme"
   attr(MET,'info') <- "narp2esd.R"
   attr(MET,'call') <- match.call()
               Datasett$utm.e <- met.no.meta$Utm_e[imatch][1]
   attr(MET,'utm.n') <- met.no.meta$Utm_n[imatch][1]
   attr(MET,'utm.sone') <- met.no.meta$Utm_sone[imatch][1]
   attr(MET,'kommune') <- met.no.meta$Kommune[imatch][1]
   attr(MET,'fylke') <- met.no.meta$Fylke[imatch][1]
   attr(MET,'type') <- met.no.meta$Type[imatch][1]
   attr(MET,'type.beskr') <- met.no.meta$Type_beskrivelse[imatch][1]
   attr(MET,'fnr') <- met.no.meta$Fnr[imatch][1]
   attr(MET,'knr') <- met.no.meta$Knr[imatch][1]
   attr(MET,'URL') <- Filnavn
   class(MET) <- c("station","month","zoo")
   invisible(MET)
}



stnr <- function (navn = NULL, lon = NULL, lat = NULL, max.dist = 10, 
    alt = NULL, Fylke = NULL, Kommune = NULL, fy = NULL, ty = NULL, 
    ny = NULL, param = "TAM", plot = FALSE, print = FALSE) 
{
    met.no.meta <- MET.no.meta(param = param, print = print)
    iue <- nchar(met.no.meta$TODATE) == 2
    met.no.meta$TODATE[iue] <- now()
    i9c <- (nchar(met.no.meta$TODATE) == 9)
    met.no.meta$TODATE[i9c] <- paste("0", met.no.meta$TODATE[i9c], 
        sep = "")
    nyrs <- as.numeric(substr(met.no.meta$TODATE, 7, 10)) -
            as.numeric(substr(met.no.meta$FROMDATE, 7, 10)) + 1
    if (!is.null(ny)) {
        keep <- (nyrs >= ny) & (is.finite(nyrs))
        print(summary(nyrs))
        print(paste("Only stations with", ny, "years of data:", 
            sum(keep), "in total"))
        met.no.meta <- met.no.meta[keep, ]
    }
    met.no.meta$Lon[!is.finite(met.no.meta$Lon)] <- -90
    met.no.meta$Lat[!is.finite(met.no.meta$Lat)] <- -90
    ii <- 1:length(met.no.meta$STNR)
    if (!is.null(navn)) {
        ii <- grep(upper.case(navn), met.no.meta$Navn)
        print(navn)
        print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii]))
    }
    if (plot) {
        plot(c(0, 32), c(57, 73), type = "n", xlab = "lon", ylab = "lat")
        addland()
        points(met.no.meta$Lon, met.no.meta$Lat, col = "grey", cex = 0.8)
    }
    if (xor(is.null(lon), is.null(lat))) 
        stop("both or none of lon/lat must be specified")
    if (!is.null(lon)) {
        if (length(lon) == 1) {
            if (plot) 
                points(lon, lat, pch = "+", col = "blue", cex = 0.7)
            d <- round(distAB(lon,lat,met.no.meta$Lon, met.no.meta$Lat)/1000, 
                3)
            print(length(d))
            ii <- II[(d <= max.dist)]
            print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii], 
                met.no.meta$Lon[ii], met.no.meta$Lat[ii], d[ii]))
        }
        else if (length(lon) == 2) {
            if (plot) 
                polygon(c(lon[1], lon[2], lon[2], lon[1], lon[1]), 
                  c(lat[1], lat[1], lat[2], lat[2], lat[1]), 
                  border = "blue", lwd = 2)
            if (length(lat) == 1) 
                stop("both or none of lon/lat must have two entries")
            ii <- II[(met.no.meta$Lon >= min(lon)) & (met.no.meta$Lon <= 
                max(lon)) & (met.no.meta$Lat >= min(lat)) & (met.no.meta$Lat <= 
                max(lat))]
            print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii], 
                met.no.meta$Lon[ii], met.no.meta$Lat[ii]))
            met.no.meta <- met.no.meta[ii, ]
        }
    }
    if (!is.null(alt)) {
        if (length(alt) == 1) {
            if (alt > 0) 
                ii <- (met.no.meta$Hoh >= alt) & is.finite(met.no.meta$Hoh)
            else ii <- (met.no.meta$Hoh <= abs(alt)) &
            is.finite(met.no.meta$Hoh)
        }
        else ii <- (met.no.meta$Hoh >= min(alt)) & (met.no.meta$Hoh <= 
            max(alt))
        ii[is.na(met.no.meta$Stnr[ii])] <- FALSE
        print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii],
                    met.no.meta$Hoh[ii]))
        met.no.meta <- met.no.meta[ii, ]
    }
    if (!is.null(Fylke)) {
        ii <- is.element(upper.case(met.no.meta$Fylke), upper.case(Fylke))
        print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii],
                    met.no.meta$Fylke[ii], 
            met.no.meta$Kommune[ii]))
        met.no.meta <- met.no.meta[ii, ]
    }
    if (!is.null(Kommune)) {
        ii <- is.element(upper.case(met.no.meta$Kommune), upper.case(Kommune))
        print(rbind(met.no.meta$Navn[ii], met.no.meta$Stnr[ii],
                    met.no.meta$Fylke[ii], 
            met.no.meta$Kommune[ii]))
        met.no.meta <- met.no.meta[ii, ]
    }
    if (plot) {
        points(met.no.meta$Lon, met.no.meta$Lat, pch = 19, col = "red", 
            cex = 0.6)
        text(met.no.meta$Lon, met.no.meta$Lat, met.no.meta$Stnr, cex = 0.5)
    }
    invisible(met.no.meta)
}


MET.no.meta <- function (param = "TAM", print = FALSE) {
    url <- paste("http://klapp/metnopub/production/metno?re=27&ct=text/plain&del=semicolon&tab=T_ELEM_MONTH&p=", 
        param, "&geo=lat&geo=utm&geo=amsl&geo=name&geo=cnr&geo=muni&nod=NA", 
        sep = "")
    dnmi.meta <- read.table(url, header = TRUE, sep = ";", as.is = TRUE, 
        fileEncoding = "latin1")
    if (print) {
        print(url)
        print(summary(dnmi.meta))
    }
    dnmi.meta$Stnr <- as.numeric(dnmi.meta$STNR)
    dnmi.meta$Lon <- as.numeric(dnmi.meta$LON)
    dnmi.meta$Lat <- as.numeric(dnmi.meta$LAT)
    dnmi.meta$Hoh <- as.numeric(dnmi.meta$AMSL)
    dnmi.meta$Navn <- dnmi.meta$ST_NAME
    dnmi.meta$Fylke <- dnmi.meta$COUNTY
    dnmi.meta$Kommune <- dnmi.meta$MUNICIPALITY
    invisible(dnmi.meta)
}
